
Keep_going = True
while Keep_going == True:

    #####################
    # Values

    NUMBER_OF_PAYMENTS = 360    # 30-year fixed rate mortgage, 30 years * 12 monthly payments
    SEATTLE_PROPERTY_TAX_RATE = 0.0092
    SAN_FRANCISCO_PROPERTY_TAX_RATE = 0.0074
    AUSTIN_PROPERTY_TAX_RATE = 0.0181
    EAST_LANSING_PROPERTY_TAX_RATE = 0.0162
    AVERAGE_NATIONAL_PROPERTY_TAX_RATE = 0.011
    SEATTLE_PRICE_PER_SQ_FOOT = 499.0
    SAN_FRANCISCO_PRICE_PER_SQ_FOOT = 1000.0
    AUSTIN_PRICE_PER_SQ_FOOT = 349.0
    EAST_LANSING_PRICE_PER_SQ_FOOT = 170.0
    AVERAGE_NATIONAL_PRICE_PER_SQ_FOOT = 244.0
    APR_2023 = 0.0668

    #####################
    # Texts

    AMORTIZATION_TEXT = '''\nWould you like to print the monthly payment schedule (Y or N)? '''
    LOCATION_NOT_KNOWN_TEXT = '''\nUnknown location. Using national averages for price per square foot and tax rate.'''
    NOT_ENOUGH_INFORMATION_TEXT = '''\nYou must either supply a desired square footage or a maximum monthly payment. Please try again.'''
    KEEP_GOING_TEXT = '''\nWould you like to make another attempt (Y or N)? '''

    #####################
    # Prompts

    WELCOME_TEXT = '''\nMORTGAGE PLANNING CALCULATOR\n============================ '''
    print(WELCOME_TEXT)
    MAIN_PROMPT = '''\nEnter a value for each of the following items or type 'NA' if unknown '''
    print(MAIN_PROMPT)

    #####################
    # Location

    LOCATIONS_TEXT = input('''\nWhere is the house you are considering (Seattle, San Francisco, Austin, East Lansing)? ''')
    if LOCATIONS_TEXT == 'Seattle':
        price_per_area = SEATTLE_PRICE_PER_SQ_FOOT
        property_tax = SEATTLE_PROPERTY_TAX_RATE
    elif LOCATIONS_TEXT == 'San Francisco':
        price_per_area = SAN_FRANCISCO_PRICE_PER_SQ_FOOT
        property_tax = SAN_FRANCISCO_PROPERTY_TAX_RATE
    elif LOCATIONS_TEXT == 'Austin':
        price_per_area = AUSTIN_PRICE_PER_SQ_FOOT
        property_tax = AUSTIN_PROPERTY_TAX_RATE
    elif LOCATIONS_TEXT == 'East Lansing':
        price_per_area = EAST_LANSING_PRICE_PER_SQ_FOOT
        property_tax = EAST_LANSING_PROPERTY_TAX_RATE
    else:
        price_per_area = AVERAGE_NATIONAL_PRICE_PER_SQ_FOOT
        property_tax = AVERAGE_NATIONAL_PROPERTY_TAX_RATE

    SQUARE_FOOTAGE_TEXT = input('''\nWhat is the maximum square footage you are considering? ''')
    if SQUARE_FOOTAGE_TEXT.isalpha():
        area = 0
    else:
        area = float(SQUARE_FOOTAGE_TEXT)

    #####################
    # Maximum Monthly Payment

    MAX_MONTHLY_PAYMENT_TEXT = input('''\nWhat is the maximum monthly payment you can afford? ''')
    if MAX_MONTHLY_PAYMENT_TEXT.isalpha():
        monthly_payment = 0
    else:
        monthly_payment = float(MAX_MONTHLY_PAYMENT_TEXT)

    #####################
    # Down Payment

    DOWN_PAYMENT_TEXT = input('''\nHow much money can you put down as a down payment? ''')
    if DOWN_PAYMENT_TEXT.isalpha():
        down_payment = 0.0
    else:
        down_payment = float(DOWN_PAYMENT_TEXT)

    #####################
    # APR

    APR_TEXT = input('''\nWhat is the current annual percentage rate? ''')
    if APR_TEXT.isalpha():
        apr_display = float(APR_2023)*100 ### Changed float(APR_TEXT) to float(APR_2023)
        apr = float(APR_2023)
    else:
        apr = float(float(APR_TEXT) / 100)
        apr_display = float(APR_TEXT)

    #####################
    # Calculations
    monthly_interest = apr / 12
    if area != 0:
        home_cost = area * price_per_area
        monthly_tax = (home_cost * property_tax) / 12
        principle = home_cost - down_payment
        mortgage_payment = (principle * ((apr / 12) * ((1 + (apr / 12)) ** NUMBER_OF_PAYMENTS))) / ((((1 + (apr / 12)) ** NUMBER_OF_PAYMENTS)) - 1)
        assumed_monthly_payment = monthly_tax + mortgage_payment

    #####################
    # Case 1

    if area != 0 and monthly_payment == 0:
        if LOCATIONS_TEXT  == 'East Lansing' or LOCATIONS_TEXT == 'Austin' or LOCATIONS_TEXT == 'San Francisco' or LOCATIONS_TEXT == 'Seattle':
            print('\n\nIn {}, an average {:,} sq. foot house would cost ${:,}.'.format(LOCATIONS_TEXT, int(area), int(home_cost)))
        else:
            print("Unknown location. Using national averages for price per square foot and tax rate.")
            print('\n\nIn the average U.S. housing market, an average {:,} sq. foot house would cost ${:,}.'.format( int(area), int(home_cost)))
        print('A 30-year fixed rate mortgage with a down payment of ${:,} at {:.1f}% APR results'.format(int(down_payment), apr_display))
        print('\tin an expected monthly payment of ${:,.2f} (taxes) + ${:,.2f} (mortgage payment) = ${:,.2f}'.format(monthly_tax, mortgage_payment, assumed_monthly_payment))
        AMORTIZATION_TEXT = input('''\nWould you like to print the monthly payment schedule (Y or N)? ''')
        amortization = AMORTIZATION_TEXT.lower()
        if amortization == 'y':
            Month = 1
            Interest = principle * monthly_interest
            Payment = mortgage_payment - Interest
            Balance = principle - Payment
            print('\n{:^7}|{:^12}|{:^13}|{:^14}'.format('Month', 'Interest', 'Payment', 'Balance'))
            print("=" * 48)
            while Balance > 0:
                print('{:^7}| ${:9,.2f} | ${:10,.2f} | ${:11,.2f}'.format(Month, Interest, Payment, Balance))
                Month += 1
                Balance -= Payment
                Interest = Balance * apr / 12
                Payment = mortgage_payment - Interest

    #####################
    # Case 2

    if monthly_payment != 0 and area != 0:
        if LOCATIONS_TEXT  == 'East Lansing' or LOCATIONS_TEXT == 'Austin' or LOCATIONS_TEXT == 'San Francisco' or LOCATIONS_TEXT == 'Seattle':
            print('\n\nIn {}, an average {:,} sq. foot house would cost ${:,}.'.format(LOCATIONS_TEXT, int(area), int(home_cost)))
        else:
            print("Unknown location. Using national averages for price per square foot and tax rate.")
            print('\n\nIn the average U.S. housing market, an average {:,} sq. foot house would cost ${:,}.'.format(int(area), int(home_cost)))
        print('A 30-year fixed rate mortgage with a down payment of ${:,} at {:.1f}% APR results'.format(int(down_payment), apr_display))
        print('\tin an expected monthly payment of ${:,.2f} (taxes) + ${:,.2f} (mortgage payment) = ${:,.2f}'.format(
            monthly_tax,
            mortgage_payment,
            assumed_monthly_payment))
        if assumed_monthly_payment <= monthly_payment:
            print(
                'Based on your maximum monthly payment of ${:,.2f} you can afford this house.'.format(monthly_payment))
        else:
            print('Based on your maximum monthly payment of ${:,.2f} you cannot afford this house.'.format(
                monthly_payment))
        AMORTIZATION_TEXT = input('''\nWould you like to print the monthly payment schedule (Y or N)? ''')
        amortization = AMORTIZATION_TEXT.lower()
        if amortization == 'y':
            Month = 1
            Balance = principle
            Interest = principle * monthly_interest
            Payment = mortgage_payment - Interest
            print("\n{:^7}|{:^12}|{:^13}|{:^14}".format('Month', 'Interest', 'Payment', 'Balance'))
            print("=" * 48)
            while Balance >= 0:
                print('{:^7}| ${:9,.2f} | ${:10,.2f} | ${:11,.2f}'.format(Month, Interest, Payment, Balance))
                Month += 1
                Balance -= Payment
                Interest = Balance * monthly_interest
                Payment = mortgage_payment - Interest

    #####################
    # Case 3 

    if area == 0 and monthly_payment != 0:
        area = 1000
        home_cost = area * price_per_area
        monthly_tax = (home_cost * property_tax) / 12
        principle = home_cost - down_payment
        mortgage_payment = (principle * ((apr / 12) * ((1 + (apr / 12)) ** NUMBER_OF_PAYMENTS))) / (
                    (((1 + (apr / 12)) ** NUMBER_OF_PAYMENTS)) - 1)
        assumed_monthly_payment = monthly_tax + mortgage_payment
        while (monthly_payment + 10) > assumed_monthly_payment or assumed_monthly_payment > monthly_payment:
            if assumed_monthly_payment < monthly_payment:
                area += 1
                home_cost = area * price_per_area
                monthly_tax = (home_cost * property_tax) / 12
                principle = home_cost - down_payment
                mortgage_payment = (principle * ((apr / 12) * ((1 + (apr / 12)) ** NUMBER_OF_PAYMENTS))) / (
                            (((1 + (apr / 12)) ** NUMBER_OF_PAYMENTS)) - 1)
                assumed_monthly_payment = monthly_tax + mortgage_payment
                if monthly_payment < assumed_monthly_payment:
                    area -= 1
                    home_cost = area * price_per_area
                    break
            elif assumed_monthly_payment > (monthly_payment):
                area -= 1
                home_cost = area * price_per_area
                monthly_tax = (home_cost * property_tax) / 12
                principle = home_cost - down_payment
                mortgage_payment = (principle * ((apr / 12) * ((1 + (apr / 12)) ** NUMBER_OF_PAYMENTS))) / (
                            (((1 + (apr / 12)) ** NUMBER_OF_PAYMENTS)) - 1)
                assumed_monthly_payment = monthly_tax + mortgage_payment
                if monthly_payment<assumed_monthly_payment:
                    area += 1
                    home_cost = area * price_per_area
                    break
        if LOCATIONS_TEXT  == 'East Lansing' or LOCATIONS_TEXT == 'Austin' or LOCATIONS_TEXT == 'San Francisco' or LOCATIONS_TEXT == 'Seattle':
            print('\n\nIn {}, a maximum monthly payment of ${:,.2f} allows the purchase of a house of {:,} sq. feet for ${:,}'.format(LOCATIONS_TEXT, monthly_payment, area, int(home_cost)))
        else:
            print("Unknown location. Using national averages for price per square foot and tax rate.")
            print('\n\nIn the average U.S, a maximum monthly payment of ${:,.2f} allows the purchase of a house of {:,} sq. feet for ${:,}'.format(
                            monthly_payment, area, int(home_cost)))
        print('\t assuming a 30-year fixed rate mortgage with a ${:,} down payment at {:.1f}% APR.'.format(
                        int(down_payment),
                        apr_display))

    #####################
    # Case 4

    if monthly_payment == 0 and area == 0:
        print(NOT_ENOUGH_INFORMATION_TEXT)

    KEEP_GOING = input("\nWould you like to make another attempt (Y or N)? ")
    keep_going = KEEP_GOING.lower()
    if keep_going != 'y':
        break
    else:
        Keep_going = True



